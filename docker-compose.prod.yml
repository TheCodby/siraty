version: "3.8"

services:
  # PostgreSQL Database for Production
  postgres:
    image: postgres:16-alpine
    container_name: siraty-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - siraty-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"

  # Next.js Application for Production
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: siraty-app-prod
    restart: always
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AUTH_LINKEDIN_ID=${AUTH_LINKEDIN_ID}
      - AUTH_LINKEDIN_SECRET=${AUTH_LINKEDIN_SECRET}
    ports:
      # Expose to host nginx (localhost only for security)
      - "127.0.0.1:3000:3000"
    networks:
      - siraty-internal
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
      replicas: 2

  # Backup Service
  backup:
    image: postgres:16-alpine
    container_name: siraty-backup-prod
    restart: "no"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./backups:/backups
      - ./docker/backup/backup.sh:/backup.sh:ro
    networks:
      - siraty-internal
    depends_on:
      postgres:
        condition: service_healthy
    command: /backup.sh
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local

networks:
  siraty-internal:
    driver: bridge
